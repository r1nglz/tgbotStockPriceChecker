package stankin.glazkov.stockpricechecker;

import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Component
public class UpdateConsumer implements LongPollingSingleThreadUpdateConsumer {

    private final TelegramClient telegramClient;

    private void registerBotCommands() {
        List<BotCommand> commandList = new ArrayList<>();
        commandList.add(new BotCommand("/start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"));

        try {
            telegramClient.execute(
                    new SetMyCommands(commandList, new BotCommandScopeDefault(), null)
            );
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    public UpdateConsumer() {
        String token = System.getenv("TELEGRAM_TOKEN");
        this.telegramClient = new OkHttpTelegramClient(token);
        registerBotCommands();
    }

    @Override
    public void consume(Update update) {
        long chatId = 0;
        if (update.hasMessage()) {
            String messageText = update.getMessage().getText();
            chatId = update.getMessage().getChatId();
            if (messageText.equals("/start")) {
                try {
                    sendMainMenu(chatId);
                } catch (TelegramApiException e) {
                    throw new RuntimeException(e);
                }
            } else {
                Currency cur = Currency.findCurrency(PriceParser.listOfValues, messageText);
                StockCurrency curr = StockCurrency.FindStockCurrency(PriceParser.listOfStocks, messageText);
                if (cur != null) {
                    SendMessage message = SendMessage.builder()
                            .text(cur.getHowMuch() + " " + cur.getCharCode().toUpperCase() + " (" + cur.getFullname() + ") = " + cur.getPrice() + " RUB")
                            .chatId(chatId)
                            .build();
                    try {
                        telegramClient.execute(message);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                } else if (curr != null) {
                    SendMessage message = SendMessage.builder()
                            .text(curr.getLOTSIZE() + " –ê–∫—Ü–∏—è " + curr.getSHORTNAME() + " (" + curr.getSECNAME() + ") = " + curr.getPREVPRICE() + " RUB")
                            .chatId(chatId)
                            .build();
                    try {
                        telegramClient.execute(message);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }

                } else if (messageText.matches("[1-9][0-9]* [a-zA-Z]{3} [–í|–≤] [a-zA-Z]{3}")) {
                    String[] parts = messageText.split(" ");
                    double amount = Double.parseDouble(parts[0]);
                    String from = parts[1].toUpperCase();
                    String to = parts[3].toUpperCase();

                    try {
                        double result = ValuteConverter.convertCurrency(from, to, amount);
                        SendMessage message = SendMessage.builder()
                                .chatId(chatId)
                                .text(amount + " " + from + " = " + result + " " + to)
                                .build();
                        telegramClient.execute(message);
                    } catch (Exception e) {
                        SendMessage message = SendMessage.builder()
                                .chatId(chatId)
                                .text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: " + e.getMessage())
                                .build();
                        try {
                            telegramClient.execute(message);
                        } catch (TelegramApiException ex) {
                            throw new RuntimeException(ex);
                        }
                    }

                } else {
                    SendMessage message = SendMessage.builder()
                            .text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—Å")
                            .chatId(chatId)
                            .build();
                    try {
                        telegramClient.execute(message);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                }
            }

        } else if (update.hasCallbackQuery()) {
            try {
                handleCallbackQuery(update.getCallbackQuery());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }

    private void handleCallbackQuery(@NotNull CallbackQuery callbackQuery) throws IOException {
        var data = callbackQuery.getData();
        String chatId = callbackQuery.getMessage().getChatId().toString();

        try {
            switch (data) {
                case "help" -> sendHelp(chatId);
                case "allCurrenciesPage1" -> sendCurrenciesPage1(chatId);
                case "allCurrenciesPage2" -> sendCurrenciesPage2(chatId);
                default -> sendPrice(chatId, data);
            }
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void sendHelp(String chatId) {
        String res = """
                –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏–ª–∏ –µ—ë –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ (EUR, USD –∏ —Ç.–¥.).
                –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, —Ü–µ–Ω—É –∞–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.
                
                –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –≤–∞–ª—é—Ç –±–µ—Ä—É—Ç—Å—è —Å —Å–∞–π—Ç–∞ –¶–ë –†–§
                –î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö –∞–∫—Ü–∏–π –±–µ—Ä—É—Ç—Å—è —Å —Å–∞–π—Ç–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏.
                
                –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –≤–∞–ª—é—Ç—É –≤ –¥—Ä—É–≥—É—é, –Ω–∞–ø–∏—Å–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã} {—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã} –≤ {—Å–∏–º–≤–æ–ª—å–Ω—ã–π –∫–æ–¥ –≤–∞–ª—é—Ç—ã}.
                –ü—Ä–∏–º–µ—Ä: 100 USD –≤ RUB
                """;
        SendMessage message = SendMessage.builder()
                .text(res)
                .chatId(chatId)
                .build();
        try {
            telegramClient.execute(message);
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void sendMainMenu(long chatId) throws TelegramApiException {
        SendMessage message = SendMessage.builder()
                .text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üåç")
                .chatId(chatId)
                .build();

        var helpButton = InlineKeyboardButton.builder()
                .text("–ü–æ–º–æ—â—å \uD83C\uDF93")
                .callbackData("help")
                .build();

        var coursesButton = InlineKeyboardButton.builder()
                .text("–í—Å–µ –∫—É—Ä—Å—ã üíπ")
                .callbackData("allCurrenciesPage1")
                .build();

        List<InlineKeyboardRow> keyboardRows = List.of(
                new InlineKeyboardRow(helpButton),
                new InlineKeyboardRow(coursesButton)
        );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup(keyboardRows);
        message.setReplyMarkup(markup);
        telegramClient.execute(message);
    }

    private void sendCurrenciesPage1(String chatId) throws TelegramApiException {
        SendMessage message = SendMessage.builder()
                .text("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (—á–∞—Å—Ç—å 1):")
                .chatId(chatId)
                .build();

        var usd = InlineKeyboardButton.builder()
                .text("–î–æ–ª–ª–∞—Ä –°–®–ê")
                .callbackData("usd")
                .build();
        var eur = InlineKeyboardButton.builder()
                .text("–ï–≤—Ä–æ")
                .callbackData("eur")
                .build();
        var aud = InlineKeyboardButton.builder()
                .text("–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä")
                .callbackData("aud")
                .build();
        var azn = InlineKeyboardButton.builder()
                .text("–ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–∏–π –º–∞–Ω–∞—Ç")
                .callbackData("azn")
                .build();
        var dzd = InlineKeyboardButton.builder()
                .text("–ê–ª–∂–∏—Ä—Å–∫–∏–π –¥–∏–Ω–∞—Ä")
                .callbackData("dzd")
                .build();
        var thb = InlineKeyboardButton.builder()
                .text("–ë–∞—Ç")
                .callbackData("thd")
                .build();
        var byn = InlineKeyboardButton.builder()
                .text("–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å")
                .callbackData("byn")
                .build();
        var brl = InlineKeyboardButton.builder()
                .text("–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π —Ä–µ–∞–ª")
                .callbackData("brl")
                .build();
        var krw = InlineKeyboardButton.builder()
                .text("–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∞—è –≤–æ–Ω–∞")
                .callbackData("krw")
                .build();
        var next = InlineKeyboardButton.builder()
                .text("–î–∞–ª—å—à–µ ‚û°Ô∏è")
                .callbackData("allCurrenciesPage2")
                .build();

        List<InlineKeyboardRow> keyboardRows = List.of(
                new InlineKeyboardRow(usd),
                new InlineKeyboardRow(eur),
                new InlineKeyboardRow(aud),
                new InlineKeyboardRow(azn),
                new InlineKeyboardRow(dzd),
                new InlineKeyboardRow(thb),
                new InlineKeyboardRow(byn),
                new InlineKeyboardRow(brl),
                new InlineKeyboardRow(krw),
                new InlineKeyboardRow(next)
        );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup(keyboardRows);
        message.setReplyMarkup(markup);
        telegramClient.execute(message);
    }

    private void sendCurrenciesPage2(String chatId) throws TelegramApiException {
        SendMessage message = SendMessage.builder()
                .text("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (—á–∞—Å—Ç—å 2):")
                .chatId(chatId)
                .build();

        var uah = InlineKeyboardButton.builder()
                .text("–ì—Ä–∏–≤–Ω–∞")
                .callbackData("uah")
                .build();
        var aed = InlineKeyboardButton.builder()
                .text("–î–∏—Ä—Ö–∞–º –û–ê–≠")
                .callbackData("aed")
                .build();
        var vnd = InlineKeyboardButton.builder()
                .text("–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥")
                .callbackData("vnd")
                .build();
        var egp = InlineKeyboardButton.builder()
                .text("–ï–≥–∏–ø–µ—Ç—Å–∫–∏–π —Ñ—É–Ω—Ç")
                .callbackData("egp")
                .build();
        var pln = InlineKeyboardButton.builder()
                .text("–ü–æ–ª—å—Å–∫–∏–π –∑–ª–æ—Ç—ã–π")
                .callbackData("pln")
                .build();
        var jpy = InlineKeyboardButton.builder()
                .text("–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞")
                .callbackData("jpy")
                .build();
        var inr = InlineKeyboardButton.builder()
                .text("–ò–Ω–¥–∏–π—Å–∫–∞—è —Ä—É–ø–∏—è")
                .callbackData("inr")
                .build();
        var gbp = InlineKeyboardButton.builder()
                .text("–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤")
                .callbackData("gbp")
                .build();
        var chf = InlineKeyboardButton.builder()
                .text("–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫")
                .callbackData("chf")
                .build();
        var back = InlineKeyboardButton.builder()
                .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                .callbackData("allCurrenciesPage1")
                .build();

        List<InlineKeyboardRow> keyboardRows = List.of(
                new InlineKeyboardRow(uah),
                new InlineKeyboardRow(aed),
                new InlineKeyboardRow(vnd),
                new InlineKeyboardRow(egp),
                new InlineKeyboardRow(pln),
                new InlineKeyboardRow(jpy),
                new InlineKeyboardRow(inr),
                new InlineKeyboardRow(gbp),
                new InlineKeyboardRow(chf),
                new InlineKeyboardRow(back)
        );

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup(keyboardRows);
        message.setReplyMarkup(markup);
        telegramClient.execute(message);
    }

    private void sendPrice(String chatId, String data) {
        for (int i = 0; i < PriceParser.listOfValues.size(); i++) {
            if (PriceParser.listOfValues.get(i).getCharCode().equalsIgnoreCase(data)) {
                Currency cur = PriceParser.listOfValues.get(i);
                SendMessage message = SendMessage.builder()
                        .text(cur.getHowMuch() + " " + cur.getCharCode().toUpperCase() + " (" + cur.getFullname() + ") = " + cur.getPrice() + " RUB")
                        .chatId(chatId)
                        .build();
                try {
                    telegramClient.execute(message);
                } catch (TelegramApiException e) {
                    throw new RuntimeException(e);
                }
                break;
            }
        }
    }
}